// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> COMMON TAB (shared with all other tabs)

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
//    x: input whose squared length to calculate
sScalar lengthSq(sScalar x)
{
    return (x * x);
    //return dot(x, x); // for consistency with others
}
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//LIGHT INFO

//sLight: light data structure
//	  sCenter: the origin point of the light
//    sColor: the color of the light
//	  sIntensity: the intensity of the light for reflectance calculations

struct sLight{
	vec4 sCenter;
    vec3 sColor;
    float sIntensity;
};

//student added code
//
//------------------------------------------------------------
//initLight: initializes a light
//	  light: output light
//	  center: the origin point of the light
//    color: the color of the light
//	  intensity: the intensity of the light for reflectance calculations
void initLight(out sLight light, in vec4 center, in vec3 color, in float intensity)
{
    light.sCenter = center;
    light.sColor = color;
    light.sIntensity = intensity;
}

//calcDiffusionCoefficient: calculates the diffuse coefficent
//	  normal: the normal of the surface at the position
//	  position: position of the currently checked point
//	  liteCent: the center of the light
vec3 calcDiffuseCoefficient(vec3 normal, vec3 position, vec3 liteCent)
{
    return (normal * normalize(liteCent - position));
}

//calcAttenuation: calculates the attenuation of a light on a surface
//	  lite: the light being calculated for
//	  normal: the normal of the surface at the position
//	  position: position of the currently checked point
float calcAttenuation(sLight lite, vec3 normal, vec3 position)
{
    float d = lengthSq(lite.sCenter.xyz - position);
    return 1.0/(1.0 + sqrt(d)/lite.sIntensity + d/(lite.sIntensity * lite.sIntensity));
}

//lambertianReflection: calculates the Lambertian Reflectance value to be multiplied by a surface color and light color
//	  lite: the light being calculated for
//	  normal: the normal of the surface at the position
//	  position: position of the currently checked point
vec3 lambertianReflection(in sLight lite, vec3 normal, vec3 position)
{
    vec3 Id = calcDiffuseCoefficient(normal, position, lite.sCenter.xyz) * calcAttenuation(lite, normal, position);
    return Id.bbb;
}

struct sSphere
{
 	vec4 center;
    float radius;
    
};


void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}


float calcSpecularIntensity(sLight lite, vec3 normal, vec3 position, vec3 rayDirection)
{
    //speccoeff
    float scale = lengthSq(rayDirection);
    float Ks = dot(reflect(normalize(lite.sCenter.xyz - position), normal), vec3(rayDirection.x / scale, rayDirection.y / scale, rayDirection.z / scale));
    //highlight exponent
    float eh = 2.0;
    eh = eh * eh; //4
    //eh = eh * eh; //8
    //eh = eh * eh; //16
    //eh = eh * eh; //32
    //eh = eh * eh; //64
    
    return pow(Ks, eh);
}

float blinnSpecularIntensity(sLight lite, vec3 normal, vec3 position, vec3 rayDirection)
{
    //speccoeff
    float scale = lengthSq(rayDirection);
    float Ks = dot(reflect(normalize(normalize(lite.sCenter.xyz - position) + normalize(lite.sCenter.xyz - position)), normal), vec3(rayDirection.x / scale, rayDirection.y / scale, rayDirection.z / scale));
    //highlight exponent
    float eh = 2.0;
    eh = eh * eh; //4
    //eh = eh * eh; //8
    //eh = eh * eh; //16
    //eh = eh * eh; //32
    //eh = eh * eh; //64
    eh = 4.0 * eh;
    
    return pow(Ks, eh);
}

//Lambertian Diffusion
vec3 lambertianDiffusion(in sLight lite, vec3 normal, vec3 position, vec3 color)
{
    return (lite.sColor * calcDiffuseCoefficient(normal, position, lite.sCenter.xyz) * calcAttenuation(lite, normal, position) * color);
}

//Labertian Reflectance
vec3 lambertianReflection(in sLight lite, vec3 normal, vec3 position, vec3 color)
{
    vec3 Id = calcDiffuseCoefficient(normal, position, lite.sCenter.xyz) * calcAttenuation(lite, normal, position);
    return Id;
}

//Phong Reflectance
vec3 phongReflectance(in sLight lite, vec3 normal, vec3 position, vec3 color, vec3 rayDirection)
{
    float Ia = 0.2;
    vec3 Ca = vec3(0.7, 0.1, 0.7);
    vec3 Id = calcDiffuseCoefficient(normal, position, lite.sCenter.xyz) * calcAttenuation(lite, normal, position);
    float Is = calcSpecularIntensity(lite, normal, position, rayDirection);
    vec3 Cs = vec3(0.9, 0.4, 0.3);
    
    return Ia * Ca + (Id * color + Is * Cs) * lite.sColor;
}

//Blinn-Phong Reflectance
vec3 blinnPhongReflectance(in sLight lite, vec3 normal, vec3 position, vec3 color, vec3 rayDirection)
{
    float Ia = 0.2;
    vec3 Ca = vec3(0.7, 0.1, 0.7);
    vec3 Id = calcDiffuseCoefficient(normal, position, lite.sCenter.xyz) * calcAttenuation(lite, normal, position);
    float Is = calcSpecularIntensity(lite, normal, position, rayDirection);
    vec3 Cs = vec3(0.9, 0.4, 0.3);
    
    return Ia * Ca + (Id * color + Is * Cs) * lite.sColor;
}

vec3 lightCombo(in sLight lite, vec3 diffuseInt, vec3 reflectionColor, vec3 specIntensity, vec3 specReflecColor)
{
    vec3 combo = (diffuseInt * reflectionColor + specIntensity * specReflecColor) * lite.sColor;
    return combo;
}
    
vec3 combineLight(vec3 combo1, vec3 combo2, vec3 combo3)
{
   float Ia = 0.2;
   vec3 Ca = vec3(0.7, 0.1, 0.7); 
   return (Ia * Ca) + (combo1 + combo2 + combo3); 
}

//Sphere render
vec4 renderSphere(in vec3 dp, in float rSq, in float lSq, sSphere orbit, in sRay ray, in sLight bright)
{
    dp.z = rSq - lSq;
        
    vec3 position = orbit.center.xyz + 
    vec3(dp.x, dp.y, sqrt(dp.z)); // zSq -> z
        
    vec3 normal = (position - orbit.center.xyz) / orbit.radius;
       
    //Blinn-Phong
    return vec4(blinnPhongReflectance(bright, normal, position, (normal * 0.5 + 0.5), ray.direction.xyz), 1.0);
}



//------------------------------------------------------------
/*
// GLSL FRAGMENT SHADER STRUCTURE WITH COMMON TAB
//  -> This is (likely) how Shadertoy compiles buffer tabs:

// latest version or whichever is used
#version 300 es

// **CONTENTS OF COMMON TAB PASTED HERE**

// PROGRAM UNIFORMS (see 'Shader Inputs' dropdown)

// **CONTENTS OF BUFFER TAB PASTED HERE**

// FRAGMENT SHADER INPUTS (more on this later)

// FRAGMENT SHADER OUTPUTS (framebuffer render target(s))
//out vec4 rtFragColor; // no specific target
layout (location = 0) out vec4 rtFragColor; // default

void main()
{
    // Call 'mainImage' in actual shader main, which is 
	// 	our prototyping interface for ease of use.
	//		rtFragColor:  shader output passed by reference,
	//			full vec4 read in 'mainImage' as 'fragColor'
	//		gl_FragCoord: GLSL's built-in pixel coordinate,
	//			vec2 part read in 'mainImage' as 'fragCoord'
    mainImage(rtFragColor, gl_FragCoord.xy);
}
*/
