// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
    
    //SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0,0.0,-4.0), 0.05);
    
    
    //TEST
    vec3 dp;
    dp.xy = ray.direction.xy - sphere.center.xy;	
    float lSq = lengthSq(dp.xy),
        rSq = sphere.radius * sphere.radius;
    
    //Black Hole Values
    float gravDist = 100.0 * rSq;
    float gravPull = 1.69;
    
    if(lSq <= 1.62 * gravDist)
    {
	ray.direction.xy = dp.xy * (lSq / gravDist) - dp.xy * (gravDist / lSq) + sphere.center.xy;
    }
    
    
    
    //translate ray into cubemap points
    vec3 cubeLoc = ray.direction.xyz;
    
    //rotate ray based on iTime
    //mat2 rotationMatrix = mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));
    //cubeLoc.xz = cubeLoc.xz * rotationMatrix; //rotating cubemap based on time    
    //mat2 mouseLocMat = mat2(cos(iMouse.x), -sin(iMouse.y),sin(iMouse.x),cos(iMouse.y));
    //cubeLoc.xy = cubeLoc.xy * mouseLocMat;
    vec2 m = iMouse.xy * 3.0/iResolution.x;
    //m.y = -m.y;
    m.x = -m.x; 
    
    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));
    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));
    
    cubeLoc = (rotY * rotX) * cubeLoc;
    
    vec4 layer = texture(iChannel1, cubeLoc);
    
    //dp.xy = ray.direction.xy - sphere.center.xy;
    //lSq = lengthSq(dp.xy);
    
    
    //if(length(dp.xy) <= sphere.radius)
    
    return layer;
    
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    vec4 layer2 = calcColor(vp,ray);
    
    //fragColor += texture(iChannel1, cubeLoc);
    fragColor += layer2;
}
