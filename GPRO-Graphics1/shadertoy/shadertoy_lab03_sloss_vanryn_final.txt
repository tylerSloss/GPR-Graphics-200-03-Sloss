// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}


// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}


//rand float function taken from searching on shadertoy, 
//random_float is an alteration to serve needs when anti-aliasing
float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
float random_float(vec2 seed) 
{
 return clamp(rand(seed),-0.1,0.1);   
}


//renamed dotproduct function, overloaded for vec2 - vec4
float lenSq(in vec2 x)
{
 	return dot(x,x); 
}
float lenSq(in vec3 x)
{
 	return dot(x,x);
}
float lenSq(in vec4 x)
{
 	return dot(x,x);
}


//calculates the unit vector of a vec3
vec3 unit_vector(vec3 myVec)
{
    float scalar = sqrt(lenSq(myVec));
    return vec3(myVec.x / scalar, myVec.y / scalar, myVec.z / scalar);
}


//determines the time along the ray from the camera at which the first hit occurs with relation to a sphere
//	center: center of the sphere
//	radius: radius of the sphere
//	rayOrigin: origin of camera ray
//	rayDirection: direction of camera ray
float hit_sphere(in vec3 center, float radius, in vec4 rayOrigin, in vec4 rayDirection)
{
    vec3 oc = rayOrigin.xyz - center;  // origin - center of the sphere
    float rayLengthSQ = lenSq(rayDirection); // dot product the rayDirection
    float half_b = dot(oc, rayDirection.xyz); // dot product of oc and rayDirection
    float c = lenSq(oc) - radius*radius;  // dot product of oc minus radius ^ 2
    float discriminant = half_b*half_b - rayLengthSQ*c; //direction of the normal
    
    //if the normal is facing the camera, return the t for the ray to reach the sphere
    if(discriminant < 0.0)
    {
        return -1.0;
    }
    else
    {
        return (-half_b - sqrt(discriminant)) / rayLengthSQ;
    }
}


// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
     
    float scale = 1.0 / 100.0; //
    float t = hit_sphere(vec3(0.0,0.0,-2.0 + sin(iTime)),0.5,rayOrigin,rayDirection); //determine hit on sphere t
    
    //if on the sphere, t, return the color for the sphere
    if(t > 0.0)
    {
        vec3 N = unit_vector((rayOrigin + (t * rayDirection)).xyz - vec3(0,0,-1));
        return vec4(0.5*vec3((N.x + 1.0),(N.y + 1.0),(N.z + 1.0)), 0.0);
    }
    
    float t2 = hit_sphere(vec3(0.0,-100.5,-1.0),100.0,rayOrigin,rayDirection); //determine hit on sphere t2
    
    //if on the sphere, t2, return the color for the sphere
    if(t2 > 0.0)
    {
        vec3 N = unit_vector((rayOrigin + (t2 * rayDirection)).xyz - vec3(0,0,-1));
        return vec4(0.5*vec3(0.0,(N.y + 1.0),0.0),0.0);
    }
    
    //calculate background color gradient
    vec4 rMove = rayDirection - rayOrigin;
    t = 0.5*(rMove.y + 1.0);
   	vec4 rColor = vec4((1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0),0.0);
    return rColor;
    
}


// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0, samplesPerPixel = 200.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
  
    // color & antialiasing:
    
    vec4 pixelColor = calcColor(rayDirection,rayOrigin) / 2.0; //pixel color is half-weighted to the true value
    vec4 altRay = vec4(0.0); //recalculated for sampling
    
    //sample random points to form the other %50 weight of the pixel color
    for (float i = samplesPerPixel; i > 0.0; i -= 1.0)
    {
        //where are we sampling
        altRay = vec4(rayDirection.x + random_float(vec2(iTime)) / samplesPerPixel ,rayDirection.y + random_float(vec2(iTime)) / samplesPerPixel,rayDirection.z,0.0);
        pixelColor += calcColor(altRay,rayOrigin) / (2.0 * samplesPerPixel); //sample  
    }
    //set color
    fragColor = pixelColor; 
}