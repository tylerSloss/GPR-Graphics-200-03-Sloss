#version 300 es 
//#version 450 (glsl version) 

// MAIN DUTY: processing vertex attributes
// 	3D point in space
// 	normal vector
// 	uv: texture coordinate
//OBJECT SPACE
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;
//TEXTURE SPACE is it's own thing

//TRANSFORM UNIFOMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//VARYING 

//PER_VERTEX: pass final Color
//out vec4 vColor;

//PER_Fragmet: pass requirements for final color
out vec4 vNormal;

//out vec2 vTexcoord;
out vec4 vTexcoord;

void main()
{
	//REQUIRED: write to this variable:
	//Problem: gl_Position is in "clip_space"
	//problem: aPosition is in "object_space"	
	//gl_Position = aPosition;
	
	//postition in world space (not yet correct)
	//vec4 pos_world = uModelMat * aPosition;
	//gl_Position = pos_world;
	
	//positon in camera space
	//vec4 pos_view = uViewMat * pos_world;
	//vec4 pos_view = uViewMat * uModelMat * aPosition;
	//gl_Position = pos_view;
	
	//Position pipeline
	mat4 modlViewMat = uViewMat * uModelMat;		
	vec4 pos_view = modlViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_view;	
	gl_Position = pos_clip;
	
	//NORMAL PIPELINE
	mat3 normalMat = transpose(inverse(mat3(modlViewMat)));
	vec3 nrm_view = mat3(modlViewMat) * aNormal;
		
	// TEXCOORD PIPELINE (texture space is 2D)
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	
	
	//position in clip space
	//vec4 pos_clip = uProjMat * pos_view;
	//vec4 pos_clip = uViewProjMat * pos_world;
	//vec4 pos_clip = uViewProjMat * uModelMat * aPosition;
	//gl_Position = pos_clip;
	
	//vColor = vec4(1.0,0.5,0.0,1.0);
	//vColor = pos_view;
	
	//DEBUGING 
	//PER_VERTEX : output is final Color
	//vColor = aPosition;
	// example: output normal as color
	//vColor = vec4(aNormal * 0.5 + 0.5,1.0);
	
	//PER_FRAGMENT: OUTPUT anything fragment shader needs to calc final color
	//vNormal = vec4(aNormal,0.0);
	vNormal = vec4(nrm_view,0.0);		
	
	//vTexcoord = aTexcoord;	
	vTexcoord = uv_atlas;
	//gl_Position = /*uProjMat * modlViewMat * */ aTexcoord;
}